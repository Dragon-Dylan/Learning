#include"NEEDED.H"

//Create an administrator interface
void AdminFace(void)
{
    clrscr();
	//Home interface output
	printf("****************************** Content management *****************************\n");
    printf("***  [1]News   ***    [2]Notice    ***   [3]Account-Management  **  [0]Exit ***\n");
    printf("*******************************************************************************\n");
}


//Create an adminstrator login system
void AdminLogin(struct UserNode* admin)
{
    gotoxy(1, 18);
	clreol();
    //Define administrator pass
    LNode AdminPass;
    char AdminName[20], AdminPasswords[20];
    //Enter administrator's name
    printf("\tPlease enter your administrator name:");
    scanf("%s", AdminName);
    //Enter administrator's passwords
    printf("\tPlease enter your administrator password:");
    scanf("%s", AdminPasswords);
    //Password privacy protection
	gotoxy(1, 19);
	clreol();

    //Determine super administrator's identity
    if(strcmp(Administrator.name, AdminName) == 0 && strcmp(Administrator.passwords, AdminPasswords) == 0)
    {
        char AdminPhone[20];
        //Enter super adminstrator's phone
        printf("\tPlease your administrator phone number:");
        scanf("%s", AdminPhone);
        gotoxy(1, 19);
        clreol();
        //Determine super administrator's identity
        if(strcmp(Administrator.phone, AdminPhone) == 0)
        {
            int AdminIdentity;
            //Enter super adminstrator's identity number
            printf("\tPlease your administrator identity number:");
            scanf("%d", &AdminIdentity);
            gotoxy(1, 19);
            clreol();
            if(AdminIdentity == 9)
            {
                //Super administrator information output
                strcpy(admin->name, Administrator.name);
                strcpy(admin->passwords, "**********");
                strcpy(admin->phone, Administrator.phone);
                admin->identity = 9;
                //Login success prompt
                for(int i = 1; i < 80; i++)
                {
                    printf("*");
                    delay(44);
                }
                {
                    sound(440);
                    delay(222);
                    nosound();
                }
                printf("\n\t\t            Sign in successfully.");
                getch();
                return;
            }    
        }
    }

	//Open the file and judge whether it is opened successfully
	FILE* fp = fopen("USERS.TXT", "r");
	if(fp == NULL)
	{
		//File open failure warning
		printf("\t\tFILE NOT FOUND!");
		{
			sound(1111);
			delay(222);
			nosound();
		}
		getch();
		exit(-1);
	}

	//Request a temporary memory block then to read user information from the file "USERS.TXT" and form a user linked list
	pNode temp = (pNode)calloc(1, sizeof(LNode));
	pNode head = temp;
	fscanf(fp, "%s%s%s%d", temp->name, temp->passwords, temp->phone, &temp->identity, &temp->next);//Scan user information
	while(temp)
	{
		if(temp)
		{
			pNode itemp = (pNode)calloc(1, sizeof(LNode));
			fscanf(fp, "%s%s%s%d", itemp->name, itemp->passwords, itemp->phone, &itemp->identity, &itemp->next);//Scan user information
			temp->next = itemp;
			temp = itemp;
			if(itemp->name[0] == '\0')
				break;//Confirm that the information is read and jump out of the scan
		}
	}

    //Find administrator identity
    while(temp)
	{
		pNode p = head;
		for(; p != NULL; p = p->next)
		{
			if (strcmp(p->name, AdminName) == 0 && strcmp(p->passwords, AdminPasswords) == 0 && p->identity == 1)//Match administrator information
			{
                //The administrator's information output
                strcpy(admin->name, p->name);
                strcpy(admin->passwords, p->passwords);
                strcpy(admin->phone, p->phone);
                admin->identity = p->identity;
                //Login success prompt
                for(int i = 1; i < 80; i++)
                {
                    printf("*");
                    delay(44);
                }
                {
                    sound(440);
                    delay(222);
                    nosound();
                }
                printf("\n\t\t            Sign in successfully.");
                getch();
                //Close the file and free the temporary memory block
                fclose(fp);
                FreeCalloc(head);
                return;
			}
			if(p->next == NULL)
				goto next;//Determine the end of the match and jump out of the loop
		}
	}
	next:

	//Error notification
	printf("\t\t   User information error! Please re-login.");
	{
		sound(1111);
		delay(222);
		nosound();
	}
	getch();
	//Close the file and free the temporary memory block
	fclose(fp);
	FreeCalloc(head);
    return;
}


//Create an adminstrator system
void Admin(struct UserNode *admin)
{
    while(1)
    {
        AdminFace();//Output administrator level menu
        int adchoice = 9;
        printf("Please input your choice: No.");
        scanf("%d", &adchoice);//Administrator level menu selection
        switch(adchoice)
        {
            case 1:
                while(1)
                {
                    //Output administrator secondary menu of news
                    AdminFace();
                    printf("***** [1]New   ***    [2]Delecte   ***          [3]Modify       **  [0]Exit ***\n");
                    printf("*******************************************************************************\n");
                    int nchoice = 9;
                    printf("Please input your choice: No.");
                    scanf("%d", &nchoice);//Administrator secondary menu selection
                    if(nchoice == 1)
			            NewsWrite(admin);//New news function
                    else if(nchoice == 2)
                        NewsDelete();//Delete news function
                    else if(nchoice == 3)
                        NewsModify();//Modify news function
                    else if(nchoice == 0)
                        break;
                    else
                    {
                        //Input error warning
                        printf("\n\tInput error, please re-enter!");
                        {
                            sound(1111);
                            delay(111);
                            nosound();
                        }
                        getch();
                    }
                }
                break;
            case 2:
                Notice();//Announcement display
                int rchoice = 9;
                printf("  [1]Revise  [2]Add  [3]Renew  [9]Back  Please input your choice: No.");
                scanf("%d", &rchoice);//Announcement operation selection
                if(rchoice == 1 && rchoice == 3)
                {
                    TextBox();
                    gotoxy(3, 3);
                    char notice[1000];
                    printf("Please re-input your notice(The length cannot exceed 1000 characters.):\n");
                    TextIn(notice, 1000);//Announcement re-input

                    //Redisplay the input
                    TextBox();
                    gotoxy(3, 4);
                    printf("\t\t\t\t\t\tNotice\n");
                    printf("%s\n", notice);
                    //Read and display modification time
                    time_t t = time(NULL);
			        struct tm time = *localtime(&t);
                    printf("\t\t\t\t\t\t\t\t%d-%d-%d %d:%d", time.tm_year + 1900, time.tm_mon + 1, time.tm_mday, time.tm_hour, time.tm_min);
                    gotoxy(74, 1);

                    //Create a temporary file "TEMP.TXT" and confirm whether it is opened successfully
                    FILE* fw = fopen("TEMP.TXT", "w");
                    if(fw == NULL)
                    {
                        //File open failure warning
                        printf("\t\tRegistration failed!");
                        {
                            sound(1111);
                            delay(222);
                            nosound();
                        }
                        getch();
                        exit(-1);
                    }
                    //Changed data write
                    fprintf(fw, "%s", notice);
                    fprintf(fw, "\n");
                    //Close the file after successful writing
                    fclose(fw);
                    //Delete original file
                    remove("NOTICE.TXT");
                    //Rename new file
                    rename("TEMP.TXT", "NOTICE.TXT");
                }
                else if(rchoice == 2)
                {
                    TextBox();
                    gotoxy(3, 3);
                    char notice[444];
                    printf("Please input your additon(The length cannot exceed 444 characters.):\n");
                    TextIn(notice, 444);//Announcement addition

                    //Redisplay the input
                    TextBox();
                    gotoxy(3, 4);
                    printf("\t\t\t\t\t\tNotice\n");

                    //Open the file and confirm whether it is opened successfully
                    FILE* fp = fopen("NOTICE.TXT", "r");
                    if(fp == NULL)
                    {
                        //File open failure warning
                        printf("\t\tFILE NOT FOUND!");
                        {
                            sound(1111);
                            delay(222);
                            nosound();
                        }
                        getch();
                        exit(-1);
                    }
                    printf("\n");

                    //Output original content
                    char ch;
                    if((ch = fgetc(fp)) == EOF)
                        printf("\nNotice NULL...");//Empty announcement description
                    else
                    {
                        putchar(ch);//Non-empty announcement read output
                        while((ch = fgetc(fp)) != EOF)
                            putchar(ch);//Continue to read the file and output the notice
                    }
                    //Close the file after file-reading ends
                    fclose(fp);
                    printf("\n%s\n", notice);//Continue to output the added content
                    //Read and display modification time
                    time_t t = time(NULL);
                    struct tm time = *localtime(&t);
                    printf("\t\t\t\t\t\t\t\t%d-%d-%d %d:%d", time.tm_year + 1900, time.tm_mon + 1, time.tm_mday, time.tm_hour, time.tm_min);
                    gotoxy(74, 1);

                    int skey = 1;
                    scanf("%d", &skey);//Select and determine whether to merge content
                    if(skey)//Determine merge content
                    {
                        //Open the file and judge whether it is opened successfully
                        FILE* fw = fopen("NOTICE.TXT", "a+");
                        if(fw == NULL)
                        {
                            //File open failure warning
                            printf("\t\tNews-writing failed!");
                            {
                                sound(1111);
                                delay(222);
                                nosound();
                            }
                            getch();
                            //Free the temporary memory block
                            exit(-1);
                        }
                        //New notice add
                        fprintf(fw, "%s", notice);
                        fprintf(fw, "\n");
                        //Close the file after successful writing
		                fclose(fw);
                        //Prompt for successful writing
                        clrscr();
                        for(int i = 1; i < 80; i++)
                        {
                            printf("*");
                            delay(44);
                        }
                        {
                            sound(440);
                            delay(222);
                            nosound();
                        }
                        printf("\n\t\t           News-writing succeeded!");
                        getch();
                    }
                    else if(!skey)//Determine to cancel the merge of addition
                    {
                        clrscr();//Cancel alert successfully
                        for(int i = 1; i < 80; i++)
                        {
                            printf("*");
                            delay(44);
                        }
                        {
                            sound(1111);
                            delay(111);
                            nosound();
                        }
                        printf("\n\t\t\t   Addition cancel successfully...");
                        getch();
                    }
                }
                break;
            case 3:
                if(admin->identity != 1 && admin->identity != 9)
                {
                    clrscr();//Non administrator alerts
                    for(int i = 0; i < 80; i++)
                    {
                        printf("#");
                        delay(22);
                    }
                    printf("\nYou are no longer an administrator. Management is out of bounds!");
                    {
                        sound(1111);
                        delay(111);
                        nosound();
                    }
                    getch();
                    return;
                }
                else if(admin->identity == 1 || admin->identity == 9 )
		            Management(admin);//Administrator management function
                break;
            case 0:
                return;//Leave administrator mode
            default:
                break;//Reselect
        }
    }
}


//User management
void Management(struct UserNode *admin)
{
    //Open the file and judge whether it is opened successfully
	FILE* fp = fopen("USERS.TXT", "r");
	if(fp == NULL)
	{
		//File open failure warning
		printf("\t\tFILE NOT FOUND!");
		{
			sound(1111);
			delay(222);
			nosound();
		}
		getch();
		exit(-1);
	}

	//Request a temporary memory block then to read user information from the file "USERS.TXT" and form a user linked list
	pNode temp = (pNode)calloc(1, sizeof(LNode));
	pNode head = temp;
    int AllUserCount = 0;
	fscanf(fp, "%s%s%s%d", temp->name, temp->passwords, temp->phone, &temp->identity, &temp->next);//Scan user information
    if(temp)
        AllUserCount++;
	while(temp)
	{
		if(temp)
		{
			pNode itemp = (pNode)calloc(1, sizeof(LNode));
			fscanf(fp, "%s%s%s%d", itemp->name, itemp->passwords, itemp->phone, &itemp->identity, &itemp->next);
			if(itemp->name[0] == '\0')
			{
				temp->next = NULL;
				free(itemp);
				break;
			}

			temp->next = itemp;
			temp = itemp;
            AllUserCount++;
		}
	}
	//Close the file
	fclose(fp);

    if(!AllUserCount)
	{
		printf("Connot found the data!");
		{
			sound(1111);
			delay(111);
			nosound();
		}
		getch();
		//Free the temporary memory block
		FreeCalloc(head);
		return;
	}

    //Choose the user you wanna administer
    temp = head->next;
    int UserNum = 0, page = 1;
    while(AllUserCount)
    {
	AdminFace();
	printf("\nNum %20s Passwords Identity %20s\n", "Name", "Phone");
	pNode up = temp, dp = temp;
	for(int i = 1; i <= 8 && temp != NULL; i++, temp = temp->next)
	{
	    printf("\n[%d] %20s ********* ", i, temp->name);
	    if(temp->identity == 1 || temp->identity == 9)
		printf("   Admin");
	    else if (temp->identity == 0)
		printf("    User");
	    printf(" %20s\n", temp->phone);
	    UserNum++;
	}
	printf("\n  Page%2d  [9]Next [0]Back  Your choice: No.", page);
	int choice = 9;
	scanf("%d", &choice);
	if(choice >= 1 && choice <= 8)
	{
	    for(int c = 1; c < choice; c++)
				up = up->next;
	    clrscr();
	    AdminFace();
	    printf("\n[1] %-20s\n", up->name);
	    printf("\n[2] %-20s\n", up->passwords);
	    if(up->identity == 1 || up->identity == 9)
		printf("\n[3] %-20s\n", "Admin");
	    else if (up->identity == 0)
		printf("\n[3] %-20s\n", "User");
	    printf("\n[4] %-20s\n", up->phone);

	    int uchoice = 9;
	    printf("\n  [5]Modify [6]Delect [0]Back  Your choice: No.");
	    scanf("%d", &uchoice);
	    while(uchoice)
	    {
		if(uchoice == 1 || uchoice == 2 || uchoice == 3 || uchoice == 4)
		{
		    gotoxy(48, 13);
		    clreol();
		    printf("\tPlease select [5]Modify to modify...");
		    getch();
		    gotoxy(48, 13);
		    clreol();
		    printf("  [5]Modify [6]Delect [0]Back  Your choice: No.");
		    scanf("%d", &uchoice);
		}
		else if(uchoice == 5)
		{
		    int UpdateCount = 0;
		    while(uchoice)
		    {
			gotoxy(48, 13);
			clreol();
			printf("[0]Cancel Please choose information to be modified: No.");
			int mchoice = 0;
			scanf("%d", &mchoice);
			char ch;
			if(mchoice == 1)
			{
			    gotoxy(27, 5);
			    printf("Change?(y/n): ");
			    ch = getch();
			    if(ch == 'Y' || ch == 'y')
			    {
				gotoxy(1, 5);
				clreol();
				printf("[1]Username: ");
				scanf("%s", up->name);
				gotoxy(48, 13);
				clreol();
				UpdateCount++;
				printf("[0]Cancel Please choose information to be modified: No.");
				scanf("%d", &mchoice);
			    }
			    else
			    {
				gotoxy(48, 13);
				clreol();
				printf("[0]Cancel Please choose information to be modified: No.");
				scanf("%d", &mchoice);
			    }
			}
			else if (mchoice == 2)
			{
			    gotoxy(27, 7);
			    printf("Change?(y/n): ");
			    ch = getch();
			    if(ch == 'Y' || ch == 'y')
			    {
				gotoxy(1, 7);
				clreol();
				printf("[2]Passwords: ");
				scanf("%s", up->passwords);
				gotoxy(48, 13);
				clreol();
				UpdateCount++;
				printf("[0]Cancel Please choose information to be modified: No.");
				scanf("%d", &mchoice);
			    }
			    else
			    {
				gotoxy(48, 13);
				clreol();
				printf("[0]Cancel Please choose information to be modified: No.");
				scanf("%d", &mchoice);
			    }
			}
			else if (mchoice == 3)
			{
			    gotoxy(27, 9);
			    printf("Change?(y/n): ");
			    ch = getch();
			    if(ch == 'Y' || ch == 'y')
			    {
				gotoxy(1, 9);
				clreol();
				printf("[3]Phone: ");
				scanf("%s", up->phone);
				gotoxy(48, 13);
				clreol();
				UpdateCount++;
				printf("[0]Cancel Please choose information to be modified: No.");
				scanf("%d", &mchoice);
			    }
			    else
			    {
				gotoxy(48, 13);
				clreol();
				printf("[0]Cancel Please choose information to be modified: No.");
				scanf("%d", &mchoice);
			    }
			}
			else if (mchoice == 4)
			{
			    gotoxy(27, 11);
			    printf("Change?(y/n): ");
			    ch = getch();
			    if(ch == 'Y' || ch == 'y')
			    {
				gotoxy(1, 11);
				clreol();
				printf("[4]Indentity: User(1)/Admin(2)\tChoose which?(1/2) No.");
				int num = 0;
				while(1)
				{
				    scanf("%d", &num);
				    if(num == 0 || num == 1 || num == -1)
					break;
				    else
				    {
					gotoxy(1, 11);
					clreol();
					printf("[4]Indentity: User(1)/Admin(2)\tChoose again?(1/2) No.");
				    }
				}
				up->identity = num;

				if(strcmp(admin->name, up->name) == 0 && strcmp(admin->passwords, up->passwords) == 0 && (up->identity != 1 || up->identity != 0))
				{
				    if(UpdateCount)
					FileUpdate(head);
				    return;
				}

				gotoxy(48, 13);
				clreol();
				UpdateCount++;
				printf("[0]Cancel Please choose information to be modified: No.");
				scanf("%d", &mchoice);
			    }
			    else
			    {
				gotoxy(48, 13);
				clreol();
				printf("[0]Cancel Please choose information to be modified: No.");
				scanf("%d", &mchoice);
			    }
			}
			else if(mchoice == 0)
			{
			    gotoxy(48, 13);
			    clreol();
			    printf("  [5]Modify [6]Delect [0]Back  Your choice: No.");
			    scanf("%d", &uchoice);
			    break;
			}
			else
			{
			    gotoxy(48, 13);
			    clreol();
			    printf("\tPlease input right choice number...");
			    getch();
			    gotoxy(48, 13);
			    clreol();
			    printf("  [5]Modify [6]Delect [0]Back  Your choice: No.");
			    scanf("%d", &uchoice);
			}

			if(UpdateCount)
			    FileUpdate(head);
		    }
		}
		else if(uchoice == 6)
		{
		    for(int t = 1; t < choice-1; t++)
					dp = dp->next;
		    temp = dp;
		    temp->next = temp->next->next;
		    dp = dp->next;
		    dp->next = NULL;
		    free(dp);
                    FileUpdate(head);
                }
                else if(uchoice == 0)
                    break;
                else
                {
		    gotoxy(48, 13);
		    clreol();
		    printf("\tPlease input right choice number...");
		    getch();
		    gotoxy(48, 13);
                    clreol();
                    printf("  [5]Modify [6]Delect [0]Back  Your choice: No.");
                    scanf("%d", &uchoice);
                }
            }
            page++;
            
            if(temp == NULL)
            {
                temp = head->next;
                page = 1;
            }
	}
        else if(choice == 9)
            continue;
        else if(choice == 0)
            break;
        else
		{
			//Input error warning
			printf("Input error, please re-enter!");
			{
				sound(1111);
				delay(111);
				nosound();
			}
			getch();
		}
    }

    //Free the temporary memory block
	FreeCalloc(head);
	return;
}


//Create a interface of the clean system for super-adminnistrator
void SADinterface(void)
{
    clrscr();
    printf("\n\n\n\n\n");
    printf("\t      ***************************************************\n");
	printf("\t      **     Campus News Release Management System     **\n");
	printf("\t      ***************************************************\n");
	printf("\t      **        [1]   Clean up all deleted news        **\n");
	printf("\t      **        [2]   Clear all news                   **\n");
	printf("\t      **        [3]   Clear all users                  **\n");
	printf("\t      **        [4]   Initialize system                **\n");
	printf("\t      ***************************************************\n");
	printf("\t      **        [0]   Back                             **\n");
	printf("\t      ***************************************************\n");
    return;
}


//Create a clean system for super-administrator managing
void SuperAdmin(struct UserNode *admin)
{
    //Determine super administrator's identity
    if(strcmp(Administrator.name, admin->name) != 0 || strcmp(Administrator.phone, admin->phone) != 0 || admin->identity != 9)
    {
        clrscr();
        printf("\n\n\n\n\n");
        printf(" *************    **********      **********      ***********     **********   \n");
        printf(" *************   ****     ****   ****     ****   *************   ****     **** \n");
        printf(" ***             ***       ***   ***       ***   ***       ***   ***       *** \n");
        printf(" ***             ****     ****   ****     ****   ***  ***  ***   ****     **** \n");
        printf(" ***             *************   *************   ***   *   ***   ************* \n");
        printf(" *************   ***********     ***********     ***  ***  ***   ***********   \n");
        printf(" *************   ***  ***        ***  ***        ***  ***  ***   ***  ***      \n");
        printf(" ***             ***   ***       ***   ***       ***  * *  ***   ***   ***     \n");
        printf(" ***             ***    ***      ***    ***      ***  ***  ***   ***    ***    \n");
        printf(" ***             ***     ***     ***     ***     ***       ***   ***     ***   \n");
        printf(" *************   ***      ***    ***      ***    *************   ***      ***  \n");
        printf(" *************   ***       ***   ***       ***    ***********    ***       *** \n");
        printf("\n\n\n\n\n\n\n");
        gotoxy(80, 17);
        getch();
        return;
    }

    //A clean system for super-adminnistrator
    
    while(1)
    {
        int ruin = 9;
        char ch;
        SADinterface();
        gotoxy(1, 17);
        clreol();
        printf("\t      Please input your choice: No.");
        scanf("%d", &ruin);
        if(ruin == 1)
        {
            printf("\n\t\tReady?(y/n)");
            ch = getch();
            if(ch == 'Y' || ch == 'y')
            {
                remove("NEWSDEL.TXT");
                FILE* fw = fopen("NEWSDEL.TXT", "w");
                fclose(fw);
            }
            gotoxy(1, 22);
            for(int i = 1; i < 80; i++)
            {
                printf("*");
                delay(44);
            }
            {
                sound(666);
                delay(66);
                nosound();
            }
            printf("\n\t\t             Cleanup succeeded!");
            getch();
        }
        else if(ruin == 2)
        {
            printf("\n\t\tReady?(y/n)");
            ch = getch();
            if(ch == 'Y' || ch == 'y')
            {
                remove("NEWS.TXT");
                FILE* fw = fopen("NEWS.TXT", "w");
                fclose(fw);
            }
            gotoxy(1, 22);
            for(int i = 1; i < 80; i++)
            {
                printf("*");
                delay(44);
            }
            {
                sound(666);
                delay(66);
                nosound();
            }
            printf("\n\t\t             Cleanup succeeded!");
            getch();
        }
        else if (ruin == 3)
        {
            printf("\n\t\tReady?(y/n)");
            ch = getch();
            if(ch == 'Y' || ch == 'y')
            {
                remove("USERS.TXT");
                FILE* fw = fopen("USERS.TXT", "w");
                if(fw == NULL)
                {
                    //File open failure warning
                    printf("\n\t\t\tCleanup failed!");
                    {
                        sound(1111);
                        delay(222);
                        nosound();
                    }
                    getch();
                    exit(-1);
                }
                else
                {
                    fprintf(fw, "%s", "Visitor");
                    fprintf(fw, "\t");
                    fprintf(fw, "%s", "0");
                    fprintf(fw, "\t");
                    fprintf(fw, "%s", "0");
                    fprintf(fw, "\t");
                    fprintf(fw, "%d", -1);
                    fprintf(fw, "\n");
                }
                fclose(fw);
            }
        }
        else if (ruin == 4)
        {
            printf("\n\t\tReady?(y/n)");
            ch = getch();
            if(ch == 'Y' || ch == 'y')
            {
                remove("NEWSDEL.TXT");
                FILE* fw1 = fopen("NEWSDEL.TXT", "w");
                fclose(fw1);

                remove("NEWS.TXT");
                FILE* fw2 = fopen("NEWS.TXT", "w");
                fclose(fw2);

                remove("USERS.TXT");
                FILE* fw3 = fopen("USERS.TXT", "w");
                if(fw3 == NULL)
                {
                    //File open failure warning
                    printf("\n\t\t\tCleanup failed!");
                    {
                        sound(1111);
                        delay(222);
                        nosound();
                    }
                    getch();
                    exit(-1);
                }
                else
                {
                    fprintf(fw3, "%s", "Visitor");
                    fprintf(fw3, "\t");
                    fprintf(fw3, "%s", "0");
                    fprintf(fw3, "\t");
                    fprintf(fw3, "%s", "0");
                    fprintf(fw3, "\t");
                    fprintf(fw3, "%d", -1);
                    fprintf(fw3, "\n");
                }
                fclose(fw3);

                remove("NOTICE.TXT");
                FILE* fw4 = fopen("NOTICE.TXT", "w");
                fprintf(fw4,"%s", "Campus News Release Management System(Development Version)\nGdut Course-designed application v1.1.1.0(On Trial)\n7\tDesigned by Dylan Simon Su on the platfrom of TurboC++ v3.0.\n\tTranslation comes from Baidu translation.\n\n\t1.Currently only offline services are supported!\n\t2.Online help is not supported as well.\n\t  Please refer to the file \"Help.pdf\" for offline help.\n\t3.It must be full of holes at present, please forgive.\n");
                fclose(fw4);
            }
            gotoxy(1, 22);
            for(int i = 1; i < 80; i++)
            {
                printf("*");
                delay(44);
            }
            {
                sound(666);
                delay(66);
                nosound();
            }
            printf("\n\t\t             Cleanup succeeded!");
            getch();
        }
        else if(ruin == 0)
            return;
        else
            continue;
    }
}



/*
***********************************************
*         Designed by Dylan Simon Su          *
*  Translation comes from Baidu translation.  *
*          Dylan Simon Su copyright.          *
***********************************************
*/
